{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","handleChange","type","placeholder","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCNbC,G,MAAW,SAAAR,GAEpB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAF,OACrB,uBACAX,UAAY,SACVY,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCsCDI,G,wDAzCb,aAAe,IAAD,8BACZ,gBAgBFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAfzC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBASxC,WAAU,IAAD,EACwBC,KAAKN,MAA7Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGhD,OACA,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,YAAc,iBACdF,aAAcgB,KAAKhB,eACrB,cAAC,EAAD,CAAUH,SAAUoB,W,GApCVI,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5e7837c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img \r\n        alt=\"monster\" \r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n\r\n\r\n","import React from 'react';\r\nimport {Card} from '../card/card.component.jsx';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    \r\n    return <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n      </div>;\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({handleChange}) => (\r\n    <input \r\n    className = 'search'\r\n      type='search' \r\n      placeholder='search monsters'\r\n      onChange={handleChange}\r\n    />\r\n);","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/searchbox/searchbox.component.jsx';\nimport './App.css';\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n      };\n\n  }\n\n    // convert response into JSON then setstate\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=> this.setState({monsters:users}));\n  }\n  \n  handleChange = event => {\n    this.setState({searchField: event.target.value});\n  }\n\n  // map iterates over every elements of the array\n  //prop parameters\n  render() {\n    const {monsters, searchField} =this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    \n      return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder = 'search monster'\n          handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}